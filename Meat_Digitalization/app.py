import json
import io
import zipfile
import base64
from pathlib import Path
from datetime import datetime

import numpy as np
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns

# optional sklearn
try:
    from sklearn.linear_model import LinearRegression, Ridge, Lasso
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
    SKLEARN = True
except Exception:
    SKLEARN = False

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
# ---------------------------
# –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: –≤–∑—è—Ç—å –ø–∞–ø–∫—É, –≥–¥–µ –ª–µ–∂–∏—Ç —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
DATA_DIR = Path(__file__).parent
# fallback: —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ (–µ—Å–ª–∏ —Ç—ã –∑–∞–ø—É—Å–∫–∞–µ—à—å –Ω–µ –∏–∑ –ø–∞–ø–∫–∏)
fallback = Path(r"C:\Users\aidar\OneDrive\Desktop\–ú–ê–î–ò–ù–ê\Milk_Digitalization")
if any(fallback.glob("*.csv")) and not any(DATA_DIR.glob("*.csv")):
    DATA_DIR = fallback

PRODUCTS_CSV = DATA_DIR / "Products.csv"
SAMPLES_CSV = DATA_DIR / "Samples.csv"
MEASUREMENTS_CSV = DATA_DIR / "Measurements.csv"
VITAMINS_CSV = DATA_DIR / "Vitamins_AminoAcids.csv"
STORAGE_CSV = DATA_DIR / "Storage_Conditions.csv"
NORMS_JSON = DATA_DIR / "process_norms.json"

# ---------------------------
# –£—Ç–∏–ª–∏—Ç—ã: —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å/–ø–∞—Ä—Å–∏–Ω–≥
# ---------------------------
def safe_read_csv(path: Path):
    if not path.exists():
        return pd.DataFrame()
    try:
        return pd.read_csv(path, encoding="utf-8-sig")
    except Exception:
        return pd.read_csv(path, encoding="latin1")

def append_row_csv(path: Path, row: dict, cols_order=None):
    df_new = pd.DataFrame([row])
    write_header = not path.exists() or path.stat().st_size == 0
    if cols_order:
        for c in cols_order:
            if c not in df_new.columns:
                df_new[c] = ""
        df_new = df_new[cols_order]
    df_new.to_csv(path, mode='a', index=False, header=write_header, encoding='utf-8-sig')

def parse_numeric(val):
    if pd.isna(val):
        return np.nan
    if isinstance(val, (int, float, np.integer, np.floating)):
        return float(val)
    s = str(val).strip()
    if s == "" or "–Ω–µ –æ–±–Ω–∞—Ä—É–∂" in s.lower():
        return np.nan
    s = s.replace(',', '.').replace('√ó10^', 'e').replace('x10^', 'e').replace('√ó', '')
    if '¬±' in s:
        s = s.split('¬±')[0]
    cleaned = ''
    for ch in s:
        if ch.isdigit() or ch in '.-+eE':
            cleaned += ch
        else:
            break
    try:
        return float(cleaned)
    except Exception:
        return np.nan

def download_zip(paths, filename="Milk_Digitalization_all_csv.zip"):
    buf = io.BytesIO()
    with zipfile.ZipFile(buf, "w") as z:
        for p in paths:
            if Path(p).exists():
                z.write(p, arcname=Path(p).name)
    buf.seek(0)
    st.download_button("–°–∫–∞—á–∞—Ç—å ZIP", data=buf, file_name=filename, mime="application/zip")

def embed_pdf(path: Path):
    b = path.read_bytes()
    b64 = base64.b64encode(b).decode('utf-8')
    html = f'<iframe src="data:application/pdf;base64,{b64}" width="100%" height="600"></iframe>'
    st.components.v1.html(html, height=600, scrolling=True)

# ---------------------------
# –ó–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ (–∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# ---------------------------
products = safe_read_csv(PRODUCTS_CSV)
samples = safe_read_csv(SAMPLES_CSV)
measurements = safe_read_csv(MEASUREMENTS_CSV)
vitamins = safe_read_csv(VITAMINS_CSV)
storage = safe_read_csv(STORAGE_CSV)

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ—Å—Ç—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
def ensure_col(df, candidates, new_name):
    if df.empty:
        return df, None
    for col in df.columns:
        for cand in candidates:
            if col.strip().lower() == cand.strip().lower():
                return df.rename(columns={col: new_name}), new_name
    return df, None

products, _ = ensure_col(products, ["product_id","id"], "product_id")
products, _ = ensure_col(products, ["name","product_name"], "name")
products, _ = ensure_col(products, ["type","category"], "type")
products, _ = ensure_col(products, ["source"], "source")
products, _ = ensure_col(products, ["description"], "description")

samples, _ = ensure_col(samples, ["sample_id","id"], "sample_id")
samples, _ = ensure_col(samples, ["product_id","product"], "product_id")
samples, _ = ensure_col(samples, ["reg_number"], "reg_number")
samples, _ = ensure_col(samples, ["date_received","date"], "date_received")
samples, _ = ensure_col(samples, ["storage_days","duration_days"], "storage_days")
samples, _ = ensure_col(samples, ["conditions"], "conditions")
samples, _ = ensure_col(samples, ["notes"], "notes")

measurements, _ = ensure_col(measurements, ["id"], "id")
measurements, _ = ensure_col(measurements, ["sample_id","sample"], "sample_id")
measurements, _ = ensure_col(measurements, ["parameter","param","indicator"], "parameter")
measurements, _ = ensure_col(measurements, ["actual_value","value","measurement"], "actual_value")
measurements, _ = ensure_col(measurements, ["unit"], "unit")
measurements, _ = ensure_col(measurements, ["method"], "method")

storage, _ = ensure_col(storage, ["sample_id"], "sample_id")
storage, _ = ensure_col(storage, ["temperature_C","temperature_c","temp"], "temperature_C")
storage, _ = ensure_col(storage, ["humidity_pct","humidity"], "humidity_pct")
storage, _ = ensure_col(storage, ["duration_days"], "duration_days")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º id –≤ Int64 (–±–µ–∑ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏ NaN)
def to_intlike(df, col):
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce').astype("Int64")
    return df

products = to_intlike(products, "product_id")
samples = to_intlike(samples, "sample_id")
samples = to_intlike(samples, "product_id")
measurements = to_intlike(measurements, "sample_id")
storage = to_intlike(storage, "sample_id")

# –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ measurements
if 'actual_value' in measurements.columns:
    measurements['actual_numeric'] = measurements['actual_value'].apply(parse_numeric)
else:
    measurements['actual_numeric'] = np.nan

# parse dates
if 'date_received' in samples.columns:
    samples['date_received'] = pd.to_datetime(samples['date_received'], errors='coerce')

# ---------------------------
# –ù–æ—Ä–º—ã (—Ñ–∞–π–ª JSON –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç)
# ---------------------------
default_norms = {
    "–ü–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è": {"min":72.0, "max":75.0, "unit":"¬∞C", "note":"—Ç–∏–ø–æ–≤–∞—è –ø–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (–∏–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤)"},
    "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ": {"min":2.0, "max":6.0, "unit":"¬∞C", "note":"—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ"},
    "–§–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏—è": {"min":18.0, "max":42.0, "unit":"¬∞C", "note":"–≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ—Ü–µ–ø—Ç—É—Ä—ã"}
}
if NORMS_JSON.exists():
    try:
        norms = json.loads(NORMS_JSON.read_text(encoding='utf-8'))
    except Exception:
        norms = default_norms
else:
    norms = default_norms

# ---------------------------
# UI: —Å—Ç–∏–ª–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤
# ---------------------------
st.set_page_config(page_title="Milk Digitalization", layout="wide")
st.markdown("""
<style>
.card{background:#fff;padding:12px;border-radius:10px;box-shadow:0 6px 18px rgba(0,0,0,0.06);margin-bottom:12px}
.prod-title{font-weight:700;color:#0b4c86}
.step{border-radius:8px;padding:12px;margin-bottom:6px;color:white;font-weight:600}
.step-small{font-size:13px;color:#333}
</style>
""", unsafe_allow_html=True)

# –¶–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–∞–ø–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
STEP_COLORS = {
    "pasteurization":"#d9534f",  # red
    "cooling":"#0275d8",         # blue
    "fermentation":"#5cb85c",    # green
    "accept":"#5bc0de",          # cyan
    "normalization":"#f0ad4e",   # orange
    "homogenization":"#6f42c1",  # purple
    "inoculation":"#20c997",     # teal
    "coagulation":"#fd7e14",     # dark-orange
    "pressing":"#6c757d",        # gray
    "filtration":"#007bff",      # blue
    "storage":"#17a2b8"
}

def color_for_step(step_id):
    # try to pick by keyword
    sid = step_id.lower()
    for k,v in STEP_COLORS.items():
        if k in sid:
            return v
    # fallback color
    return "#0b4c86"

# ---------------------------
# Session state init
# ---------------------------
if 'page' not in st.session_state: st.session_state['page'] = '–ì–ª–∞–≤–Ω–∞—è'
if 'selected_product' not in st.session_state: st.session_state['selected_product'] = None
if 'selected_step' not in st.session_state: st.session_state['selected_step'] = None

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
page = st.sidebar.radio("–ú–µ–Ω—é", ["–ì–ª–∞–≤–Ω–∞—è","–ü—Ä–æ–¥—É–∫—Ç","–ú–æ–¥–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"], index=["–ì–ª–∞–≤–Ω–∞—è","–ü—Ä–æ–¥—É–∫—Ç","–ú–æ–¥–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"].index(st.session_state['page']) if st.session_state['page'] in ["–ì–ª–∞–≤–Ω–∞—è","–ü—Ä–æ–¥—É–∫—Ç","–ú–æ–¥–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"] else 0)
st.session_state['page'] = page

def goto_product(pid):
    st.session_state['selected_product'] = int(pid)
    st.session_state['page'] = '–ü—Ä–æ–¥—É–∫—Ç'
    st.session_state['selected_step'] = None
    st.rerun()

# ---------------------------
# –ì–ª–∞–≤–Ω–∞—è ‚Äî 5 –∫–∞—Ä—Ç–æ—á–µ–∫
# ---------------------------
if st.session_state['page'] == '–ì–ª–∞–≤–Ω–∞—è':
    st.title("ü•õ Milk Digitalization")
    st.write("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Üí –Ω–∞–∂–º–∏ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–∞.")

    # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª)
    fixed_products = [
        {"product_id":1,"name":"–ú–æ–ª–æ–∫–æ (–∫–æ—Ä–æ–≤—å–µ)","type":"–º–æ–ª–æ–∫–æ","source":"–∫–æ—Ä–æ–≤—å–µ","description":"–°–≤–µ–∂–µ–µ –º–æ–ª–æ–∫–æ"},
        {"product_id":2,"name":"–ú–æ–ª–æ–∫–æ (–∫–æ–∑—å–µ)","type":"–º–æ–ª–æ–∫–æ","source":"–∫–æ–∑—å–µ","description":"–°–≤–µ–∂–µ–µ –º–æ–ª–æ–∫–æ"},
        {"product_id":3,"name":"–°–∞—Ä—ã —ñ—Ä—ñ–º—à—ñ–∫ (–∫–æ—Ä–æ–≤—å–µ)","type":"—Å—ã—Ä","source":"–∫–æ—Ä–æ–≤—å–µ","description":"–¢–≤—ë—Ä–¥—ã–π —Å—ã—Ä"},
        {"product_id":4,"name":"–°–∞—Ä—ã —ñ—Ä—ñ–º—à—ñ–∫ (–∫–æ–∑—å–µ)","type":"—Å—ã—Ä","source":"–∫–æ–∑—å–µ","description":"–¢–≤—ë—Ä–¥—ã–π —Å—ã—Ä"},
        {"product_id":5,"name":"–ê–π—Ä–∞–Ω","type":"–∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω—ã–π","source":"–∫–æ—Ä–æ–≤—å–µ","description":"–ö–∏—Å–ª–æ–º–æ–ª–æ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"}
    ]

    display_products = []
    for fp in fixed_products:
        # try to prefer data from CSV
        chosen = None
        if not products.empty:
            try:
                if 'product_id' in products.columns:
                    match = products[products['product_id'] == fp['product_id']]
                    if not match.empty:
                        chosen = match.iloc[0].to_dict()
            except Exception:
                chosen = None
        display_products.append(chosen if chosen is not None else fp)

    cols = st.columns(3)
    for i,p in enumerate(display_products):
        c = cols[i%3]
        with c:
            st.markdown(f"<div class='card'><div class='prod-title'>{p['name']}</div><div class='step-small'>–¢–∏–ø: {p.get('type','-')} ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {p.get('source','-')}</div><div style='margin-top:8px'>{p.get('description','')}</div></div>", unsafe_allow_html=True)
            if st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"open_{i}"):
                goto_product(p['product_id'])

    st.markdown("---")
    c1,c2 = st.columns(2)
    if c1.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (reload CSV)"):
        # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å CSV
        st.experimental_rerun()
    if c2.button("–°–∫–∞—á–∞—Ç—å CSV ZIP"):
        download_zip([PRODUCTS_CSV,SAMPLES_CSV,MEASUREMENTS_CSV,VITAMINS_CSV,STORAGE_CSV])

# ---------------------------
# –ü—Ä–æ–¥—É–∫—Ç ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ + –±–ª–æ–∫-—Å—Ö–µ–º–∞
# ---------------------------
elif st.session_state['page'] == '–ü—Ä–æ–¥—É–∫—Ç':
    pid = st.session_state.get('selected_product', None)
    if pid is None:
        st.info("–û—Ç–∫—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
    else:
        # —É–∑–Ω–∞—ë–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        prod = None
        if not products.empty and 'product_id' in products.columns:
            m = products[products['product_id'] == int(pid)]
            if not m.empty:
                prod = m.iloc[0].to_dict()
        if prod is None:
            # fallback –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
            names = {1:"–ú–æ–ª–æ–∫–æ (–∫–æ—Ä–æ–≤—å–µ)",2:"–ú–æ–ª–æ–∫–æ (–∫–æ–∑—å–µ)",3:"–°–∞—Ä—ã —ñ—Ä—ñ–º—à—ñ–∫ (–∫–æ—Ä–æ–≤—å–µ)",4:"–°–∞—Ä—ã —ñ—Ä—ñ–º—à—ñ–∫ (–∫–æ–∑—å–µ)",5:"–ê–π—Ä–∞–Ω"}
            prod = {"product_id":pid,"name":names.get(pid,f"–ü—Ä–æ–¥—É–∫—Ç {pid}"),"type":"-","source":"-","description":""}

        st.header(prod['name'])
        st.write(f"**–¢–∏–ø:** {prod.get('type','-')}  ‚Ä¢  **–ò—Å—Ç–æ—á–Ω–∏–∫:** {prod.get('source','-')}")
        if prod.get('description'):
            st.write(prod.get('description'))

        st.markdown("---")
        st.subheader("–ü—Ä–æ—Ü–µ—Å—Å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è ‚Äî –Ω–∞–∂–º–∏ –±–ª–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª—å —ç—Ç–∞–ø–∞")
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤–∑—è—Ç—ã –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
        name_low = str(prod['name']).lower()
        if "–∞–π—Ä–∞–Ω" in name_low:
            steps = [
                ("accept","–ü—Ä–∏–µ–º–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å—ã—Ä—å—è"),
                ("normalization","–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–∞"),
                ("pasteurization","–ü–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (72‚Äì75¬∞C)"),
                ("cooling_to_inoc","–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –¥–æ –∑–∞–∫–≤–∞—à–∏–≤–∞–Ω–∏—è (~40‚Äì42¬∞C)"),
                ("inoculation","–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–≤–∞—Å–∫–∏"),
                ("fermentation","–§–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏—è (–∫–æ–Ω—Ç—Ä–æ–ª—å pH)"),
                ("final_cooling","–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –∏ —Ñ–∞—Å–æ–≤–∫–∞")
            ]
        elif "—Å–∞—Ä—ã" in name_low or "—ñ—Ä—ñ–º—à—ñ–∫" in name_low:
            steps = [
                ("accept","–ü—Ä–∏–µ–º–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"),
                ("pasteurization","–ü–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è"),
                ("coagulation","–°–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ/–∫–æ–∞–≥—É–ª—è—Ü–∏—è"),
                ("whey_removal","–û—Ç–¥–µ–ª–µ–Ω–∏–µ —Å—ã–≤–æ—Ä–æ—Ç–∫–∏"),
                ("pressing","–ü—Ä–µ—Å—Å–æ–≤–∞–Ω–∏–µ"),
                ("salting","–ü–æ—Å–æ–ª–∫–∞/–æ–±—Ä–∞–±–æ—Ç–∫–∞"),
                ("ripening","–í—ã–¥–µ—Ä–∂–∫–∞ / —Å–æ–∑—Ä–µ–≤–∞–Ω–∏–µ")
            ]
        else:
            steps = [
                ("accept","–ü—Ä–∏–µ–º–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å—ã—Ä—å—è"),
                ("filtration","–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è / –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è"),
                ("pasteurization","–ü–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (72‚Äì75¬∞C)"),
                ("cooling","–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ (2‚Äì6¬∞C)"),
                ("filling","–†–æ–∑–ª–∏–≤ / –£–ø–∞–∫–æ–≤–∫–∞"),
                ("storage","–•—Ä–∞–Ω–µ–Ω–∏–µ")
            ]

        # –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–ª–æ–∫–æ–≤: colored div + –∫–Ω–æ–ø–∫–∞ –ø–æ–¥ –Ω–∏–º
        for sid,label in steps:
            color = color_for_step(sid)
            st.markdown(f"<div class='step' style='background:{color};'>{label}</div>", unsafe_allow_html=True)
            if st.button("–û—Ç–∫—Ä—ã—Ç—å —ç—Ç–∞–ø", key=f"openstep_{pid}_{sid}"):
                st.session_state['selected_step'] = sid
                st.session_state['selected_step_label'] = label
                st.rerun()

        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ
        if st.session_state.get('selected_step'):
            st.markdown("---")
            sel = st.session_state['selected_step']
            sel_label = st.session_state.get('selected_step_label', sel)
            st.subheader(f"–î–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–∞: {sel_label}")

            # –ø–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—É (–∏–∑ json –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç)
            step_norm = None
            if NORMS_JSON.exists():
                try:
                    js = json.loads(NORMS_JSON.read_text(encoding='utf-8'))
                    # –∏—â–µ–º –∫–ª—é—á –ø–æ id –∏–ª–∏ –ø–æ label
                    step_norm = js.get(sel) or js.get(sel_label) or None
                except:
                    step_norm = None
            if step_norm is None:
                # —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
                if "–ø–∞—Å—Ç–µ—Ä" in sel_label.lower():
                    step_norm = norms.get("–ü–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è")
                elif "–æ—Ö–ª–∞–∂" in sel_label.lower() or "—Ö—Ä–∞–Ω" in sel_label.lower():
                    step_norm = norms.get("–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ")
                elif "—Ñ–µ—Ä–º–µ–Ω—Ç" in sel_label.lower():
                    step_norm = norms.get("–§–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏—è")
            if step_norm:
                st.write(f"**–ù–æ—Ä–º–∞:** {step_norm.get('min','-')} ‚Äî {step_norm.get('max','-')} {step_norm.get('unit','')}")
                if step_norm.get('note'):
                    st.caption(step_norm.get('note'))
            else:
                st.info("–ù–æ—Ä–º–∞ –¥–ª—è —ç—Ç–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å process_norms.json –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º –µ—Å–ª–∏ —Ö–æ—á–µ—à—å).")

            # –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–∏–π —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            st.write("–°–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–ø–æ –ø–∞—Ä—Ç–∏—è–º –ø—Ä–æ–¥—É–∫—Ç–∞):")
            if 'product_id' in samples.columns:
                prod_samples = samples[samples['product_id'] == int(pid)]
            else:
                prod_samples = pd.DataFrame()

            if prod_samples.empty:
                st.info("–ü–∞—Ä—Ç–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (Samples.csv –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞).")
            else:
                rel = measurements[measurements['sample_id'].isin(prod_samples['sample_id'])] if ('sample_id' in measurements.columns) else pd.DataFrame()
                if rel.empty:
                    st.info("–ò–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (Measurements.csv –ø—É—Å—Ç –∏–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π).")
                else:
                    rel_show = rel.copy()
                    if 'actual_numeric' not in rel_show.columns and 'actual_value' in rel_show.columns:
                        rel_show['actual_numeric'] = rel_show['actual_value'].apply(parse_numeric)
                    st.dataframe(rel_show.sort_values(['sample_id','parameter']).reset_index(drop=True))
                    # –µ—Å–ª–∏ –µ—Å—Ç—å temp measurements - —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –Ω–æ—Ä–º–æ–π
                    if step_norm and 'min' in step_norm and 'max' in step_norm:
                        temp_mask = rel_show['parameter'].astype(str).str.lower().str.contains('—Ç–µ–º–ø–µ—Ä–∞|temp', na=False)
                        if temp_mask.any():
                            tmp = rel_show[temp_mask].copy()
                            tmp['num'] = tmp['actual_numeric']
                            tmp['ok'] = tmp['num'].apply(lambda x: True if pd.notna(x) and step_norm['min'] <= x <= step_norm['max'] else False)
                            st.write("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ—Ä–º–µ:")
                            st.dataframe(tmp[['sample_id','parameter','actual_value','num','ok']].reset_index(drop=True))
                        else:
                            st.info("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.")

            # —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏
            st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é")
            with st.form(f"add_batch_{pid}", clear_on_submit=True):
                new_sample_id = int(samples['sample_id'].max())+1 if ('sample_id' in samples.columns and not samples.empty and samples['sample_id'].notna().any()) else 1
                reg = st.text_input("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä", value=f"{200+new_sample_id}")
                date_rcv = st.date_input("–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", value=datetime.now().date())
                storage_days = st.number_input("–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–∏)", min_value=0, value=0)
                temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", value=21.0, format="%.2f")
                humid = st.number_input("–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)", value=64)
                notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
                sub = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—Ç–∏—é")
            if sub:
                row = {"sample_id":int(new_sample_id),"product_id":int(pid),"reg_number":reg,"date_received":date_rcv.strftime("%Y-%m-%d"),"storage_days":int(storage_days),"conditions":f"{temp}¬∞C, {humid}%","notes":notes}
                append_row_csv(SAMPLES_CSV, row, cols_order=["sample_id","product_id","reg_number","date_received","storage_days","conditions","notes"])
                st.success("–ü–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ù–∞–∂–º–∏ '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' –Ω–∞ –≥–ª–∞–≤–Ω–æ–π, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å CSV –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")

            # —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
            st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ")
            with st.form(f"add_meas_{pid}", clear_on_submit=True):
                sample_opts = prod_samples['sample_id'].tolist() if not prod_samples.empty else []
                sample_choice = st.selectbox("Sample ID", options=sample_opts) if sample_opts else None
                param = st.text_input("–ü–∞—Ä–∞–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: pH, –ë–µ–ª–æ–∫, –ñ–∏—Ä, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)")
                val = st.text_input("–ó–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4.6 –∏–ª–∏ 89.54¬±1.07)")
                unit = st.text_input("–ï–¥–∏–Ω–∏—Ü–∞", value="")
                method = st.text_input("–ú–µ—Ç–æ–¥ (–ì–û–°–¢ ...)", value="")
                addm = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ")
            if addm:
                if sample_choice is None:
                    st.error("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –ø–∞—Ä—Ç–∏—é (sample) –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞.")
                else:
                    new_mid = int(measurements['id'].max())+1 if ('id' in measurements.columns and not measurements.empty and measurements['id'].notna().any()) else int(datetime.now().timestamp())
                    rowm = {"id": new_mid, "sample_id": int(sample_choice), "parameter": param, "unit": unit, "actual_value": val, "method": method}
                    append_row_csv(MEASUREMENTS_CSV, rowm, cols_order=["id","sample_id","parameter","unit","actual_value","method"])
                    st.success("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏ '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' –Ω–∞ –≥–ª–∞–≤–Ω–æ–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

# ---------------------------
# –ú–æ–¥–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
# ---------------------------
elif st.session_state['page'] == '–ú–æ–¥–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞':
    st.title("–ú–æ–¥–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Äî —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã")
    st.write("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚Üí –≤—ã–±–æ—Ä target/feature ‚Üí –æ–±—É—á–µ–Ω–∏–µ ‚Üí –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫")

    if measurements.empty or samples.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Measurements.csv –∏/–∏–ª–∏ Samples.csv.")
    else:
        meas = measurements.copy()
        if 'actual_numeric' not in meas.columns and 'actual_value' in meas.columns:
            meas['actual_numeric'] = meas['actual_value'].apply(parse_numeric)
        pivot = meas.pivot_table(index='sample_id', columns='parameter', values='actual_numeric', aggfunc='first').reset_index()
        df_all = samples.merge(pivot, on='sample_id', how='left')

        st.subheader("Preview –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df_all.head(30))

        ignore = ['sample_id','product_id','reg_number','date_received','storage_days','conditions','notes']
        possible = [c for c in df_all.columns if c not in ignore]
        if not possible:
            st.warning("–ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è.")
        else:
            target = st.selectbox("Target (—Ü–µ–ª—å)", options=possible, index=0)
            features = st.multiselect("Features (–ø—Ä–∏–∑–Ω–∞–∫–∏)", options=[c for c in possible if c!=target], default=[c for c in ['–ë–µ–ª–æ–∫','–ñ–∏—Ä','–í–ª–∞–≥–∞','storage_days'] if c in df_all.columns][:3])
            if not features:
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏.")
            else:
                dataset = df_all[[target]+features].dropna()
                st.write("–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:", len(dataset))
                if len(dataset) < 5:
                    st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω—ã —Ö–æ—Ç—è –±—ã 5 —Å—Ç—Ä–æ–∫.")
                else:
                    X = dataset[features].astype(float).values
                    y = dataset[target].astype(float).values
                    test_size = st.slider("–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–ª—è", 0.1, 0.5, 0.3)

                    if SKLEARN:
                        alg = st.selectbox("–ê–ª–≥–æ—Ä–∏—Ç–º", ["Linear","Ridge","Lasso"])
                        Model = LinearRegression if alg=="Linear" else (Ridge if alg=="Ridge" else Lasso)
                        model = Model()
                        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)
                        model.fit(X_train, y_train)
                        y_pred = model.predict(X_test)
                        r2 = r2_score(y_test, y_pred)
                        rmse = mean_squared_error(y_test, y_pred, squared=False)
                        mae = mean_absolute_error(y_test, y_pred)
                        st.metric("R¬≤", f"{r2:.4f}")
                        st.metric("RMSE", f"{rmse:.4f}")
                        st.metric("MAE", f"{mae:.4f}")

                        # coefficients
                        try:
                            coefs = dict(zip(features, model.coef_))
                            st.write("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:")
                            st.table(pd.DataFrame.from_dict(coefs, orient='index', columns=['coef']).round(6))
                        except Exception:
                            pass

                        # plot
                        fig, ax = plt.subplots(figsize=(8,4))
                        if len(features) == 1:
                            x_test = X_test.flatten()
                            idx = np.argsort(x_test)
                            ax.scatter(X_test, y_test, label="Actual", alpha=0.7)
                            ax.plot(x_test[idx], model.predict(X_test)[idx], color='red', label='Predict')
                            ax.set_xlabel(features[0]); ax.set_ylabel(target)
                            ax.legend()
                        else:
                            ax.scatter(y_test, y_pred, alpha=0.7)
                            ax.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')
                            ax.set_xlabel("Actual"); ax.set_ylabel("Predicted")
                        st.pyplot(fig)
                    else:
                        # fallback: if single feature use numpy.polyfit
                        if len(features) == 1:
                            x = X.flatten()
                            coef = np.polyfit(x, y, 1)
                            slope, intercept = coef[0], coef[1]
                            st.write(f"–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (numpy): {target} = {slope:.4f}*{features[0]} + {intercept:.4f}")
                            fig, ax = plt.subplots(figsize=(8,4))
                            idx = np.argsort(x)
                            ax.scatter(x, y, alpha=0.7)
                            ax.plot(x[idx], np.polyval(coef, x[idx]), color='red')
                            st.pyplot(fig)
                        else:
                            st.warning("–£—Å—Ç–∞–Ω–æ–≤–∏ scikit-learn –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö: pip install scikit-learn")
#streamlit run app1.py
# ---------------------------
# –ö–æ–Ω–µ—Ü file
# ---------------------------
