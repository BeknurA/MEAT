# app.py ‚Äî –ü–æ–ª–Ω–∞—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ + –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å + –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å pH
import pandas as pd
import numpy as np
import streamlit as st
from pathlib import Path
import matplotlib.pyplot as plt
import io
import json

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è 'openpyxl' ---
try:
    import openpyxl
except ImportError:
    st.error(
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: 'openpyxl' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ, –≤—ã–ø–æ–ª–Ω–∏–≤ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∫–æ–º–∞–Ω–¥—É: pip install openpyxl")
    st.stop()

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º
# ---------------------------
st.set_page_config(page_title="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ñ–∞—è", layout="wide")
DATA_DIR = Path(__file__).parent
MEAT_DATA_XLSX = DATA_DIR / "meat_data.xlsx"
OPYTY_XLSX = DATA_DIR / "opyty.xlsx"
PRODUCTS_CSV = DATA_DIR / "Products.csv"
SAMPLES_CSV = DATA_DIR / "Samples.csv"
MEASUREMENTS_CSV = DATA_DIR / "Measurements.csv"


# ---------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# ---------------------------
def safe_read_csv(path: Path):
    if not path.exists(): return pd.DataFrame()
    try:
        return pd.read_csv(path, encoding="utf-8-sig")
    except Exception:
        return pd.read_csv(path, encoding="latin1")


def append_row_csv(path: Path, row: dict, cols_order=None):
    df_new = pd.DataFrame([row])
    write_header = not path.exists() or path.stat().st_size == 0
    if cols_order:
        for c in cols_order:
            if c not in df_new.columns: df_new[c] = ""
        df_new = df_new[cols_order]
    df_new.to_csv(path, mode='a', index=False, header=write_header, encoding='utf-8-sig')


# ---------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ---------------------------
@st.cache_data
def load_all_data():
    data_sheets = {}
    try:
        if MEAT_DATA_XLSX.exists():
            xls = pd.ExcelFile(MEAT_DATA_XLSX)
            for sheet_name in xls.sheet_names:
                data_sheets[sheet_name] = pd.read_excel(xls, sheet_name=sheet_name)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å '{MEAT_DATA_XLSX.name}': {e}")

    df_ph = None
    if OPYTY_XLSX.exists():
        try:
            df_ph = pd.read_excel(OPYTY_XLSX)
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å '{OPYTY_XLSX.name}': {e}")

    products_df = safe_read_csv(PRODUCTS_CSV)
    samples_df = safe_read_csv(SAMPLES_CSV)
    measurements_df = safe_read_csv(MEASUREMENTS_CSV)

    return data_sheets, df_ph, products_df, samples_df, measurements_df


all_meat_data, df_ph, products, samples, measurements = load_all_data()


# ---------------------------
# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
# ---------------------------
def calculate_stability(pressure, viscosity):
    p, v = pressure, viscosity
    return 27.9 - 0.1 * p - 1.94 * v - 0.75 * p * v - 0.67 * p ** 2 - 2.5 * v ** 2


def get_ph_model(time_h, ph_obs):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å: pH = a*log(t) + b."""
    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (NaN –∏ –≤—Ä–µ–º—è <= 0)
    valid = ~np.isnan(time_h) & ~np.isnan(ph_obs) & (time_h > 0)
    t, y = time_h[valid], ph_obs[valid]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    if len(t) < 2:
        return None, None, None, None, None

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º –∏ —Å—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    log_t = np.log(t).reshape(-1, 1)
    X = np.hstack([log_t, np.ones(log_t.shape)])

    # –ù–∞—Ö–æ–¥–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã 'a' (–Ω–∞–∫–ª–æ–Ω) –∏ 'b' (—Å–º–µ—â–µ–Ω–∏–µ)
    coeffs, _, _, _ = np.linalg.lstsq(X, y, rcond=None)

    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏
    model_func = lambda t_in: coeffs[0] * np.log(t_in) + coeffs[1]

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—á–µ–∫
    y_hat = model_func(t)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    r2 = 1 - (np.sum((y - y_hat) ** 2) / np.sum((y - np.mean(y)) ** 2))
    rmse = np.sqrt(np.mean((y - y_hat) ** 2))

    return model_func, y_hat, rmse, r2, coeffs


# ---------------------------
# –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
# ---------------------------
st.sidebar.title("–ú–µ–Ω—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
page_options = ["–ì–ª–∞–≤–Ω–∞—è", "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ñ–∞—è", "–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏", "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ pH", "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"]
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", page_options)

if 'selected_product_id' not in st.session_state: st.session_state.selected_product_id = None
if 'selected_step' not in st.session_state: st.session_state.selected_step = None

# ==========================================================================
# –°–¢–†–ê–ù–ò–¶–ê 1: –ì–õ–ê–í–ù–ê–Ø
# ==========================================================================
if page == "–ì–ª–∞–≤–Ω–∞—è":
    st.title("üêé –¶–∏—Ñ—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ñ–∞—è")
    st.write(
        "–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏.")

    fixed_products = [
        {"id": 1, "name": "–ü–∞—Ä—Ç–∏—è ‚Ññ1 (–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç)",
         "description": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–∞—Ä—Ç–∏—è, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."},
        {"id": 2, "name": "–û–ø—ã—Ç ‚Ññ1 (–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø–æ—Å–æ–ª)",
         "description": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–∞—Ä—Ç–∏—è —Å –Ω–æ–≤–æ–π —Ä–µ—Ü–µ–ø—Ç—É—Ä–æ–π –ø–æ—Å–æ–ª–æ—á–Ω–æ–π —Å–º–µ—Å–∏."},
        {"id": 3, "name": "–û–ø—ã—Ç ‚Ññ2 (–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —Å—É—à–∫–∞)",
         "description": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤ –∫–∞–º–µ—Ä–µ."},
        {"id": 4, "name": "–û–ø—ã—Ç ‚Ññ3 (–î–ª–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏–µ)",
         "description": "–ü–∞—Ä—Ç–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º —Ö–æ–ª–æ–¥–Ω–æ–π —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–∏."},
        {"id": 5, "name": "–û–ø—ã—Ç ‚Ññ4 (–ù–æ–≤—ã–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫—É–ª—å—Ç—É—Ä—ã)",
         "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∏–∫—Ä–æ–æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –¥–ª—è —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è."}
    ]

    st.markdown("---")
    st.header("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ –∏ –æ–ø—ã—Ç—ã")
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏.")

    cols = st.columns(3)
    for i, p in enumerate(fixed_products):
        with cols[i % 3]:
            st.subheader(p['name'])
            st.write(p['description'])

# ==========================================================================
# –°–¢–†–ê–ù–ò–¶–ê 2: –ü–†–û–¶–ï–°–° –ü–†–û–ò–ó–í–û–î–°–¢–í–ê
# ==========================================================================
elif page == "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ñ–∞—è":
    st.title("‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ñ–∞—è")
    st.write("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏.")

    if products.empty:
        products = pd.DataFrame([
            {"product_id": 1, "name": "–ü–∞—Ä—Ç–∏—è ‚Ññ1 (–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ—Ü–µ–ø—Ç)"},
            {"product_id": 2, "name": "–û–ø—ã—Ç ‚Ññ1 (–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø–æ—Å–æ–ª)"},
        ])

    product_options = {row['name']: row['product_id'] for index, row in products.iterrows()}
    selected_product_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é –∏–ª–∏ –æ–ø—ã—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", options=product_options.keys())

    if selected_product_name:
        st.session_state.selected_product_id = product_options[selected_product_name]
        st.markdown(f"**–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø–∞—Ä—Ç–∏–µ–π:** `{selected_product_name}`")

        steps = [
            ("receiving", "–ü—Ä–∏–µ–º–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—ã—Ä—å—è"),
            ("deboning", "–û–±–≤–∞–ª–∫–∞ –∏ –∂–∏–ª–æ–≤–∫–∞"),
            ("curing", "–ü–æ—Å–æ–ª –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–π"),
            ("aging", "–°–æ–∑—Ä–µ–≤–∞–Ω–∏–µ (—Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏—è)"),
            ("drying", "–°—É—à–∫–∞ –∏ –≤—è–ª–µ–Ω–∏–µ"),
            ("quality", "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∞")
        ]

        for sid, label in steps:
            if st.button(label, key=sid, use_container_width=True):
                st.session_state.selected_step = {"id": sid, "label": label}

        if st.session_state.selected_step:
            st.markdown("---")
            step_info = st.session_state.selected_step
            st.subheader(f"–î–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–∞: {step_info['label']}")
            st.write("**–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:**")
            pid = st.session_state.selected_product_id
            prod_samples = samples[samples['product_id'] == pid] if not samples.empty else pd.DataFrame()

            if prod_samples.empty:
                st.info("–î–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞.")
            else:
                rel_measurements = measurements[measurements['sample_id'].isin(
                    prod_samples['sample_id'])] if not measurements.empty else pd.DataFrame()
                if rel_measurements.empty:
                    st.info("–î–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏ –µ—â–µ –Ω–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π.")
                else:
                    st.dataframe(rel_measurements)

            col1, col2 = st.columns(2)
            with col1:
                with st.form(f"add_sample_form", clear_on_submit=True):
                    st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑–µ—Ü –≤ –ø–∞—Ä—Ç–∏—é")
                    reg_num = st.text_input("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—Ä–∞–∑—Ü–∞")
                    notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
                    if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–∑–µ—Ü"):
                        new_id = samples['sample_id'].max() + 1 if not samples.empty and samples[
                            'sample_id'].notna().any() else 1
                        new_row = {"sample_id": new_id, "product_id": pid, "reg_number": reg_num, "notes": notes}
                        append_row_csv(SAMPLES_CSV, new_row,
                                       cols_order=["sample_id", "product_id", "reg_number", "date_received",
                                                   "storage_days", "conditions", "notes"])
                        st.success(f"–û–±—Ä–∞–∑–µ—Ü #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
                        st.rerun()

            with col2:
                with st.form(f"add_measurement_form", clear_on_submit=True):
                    st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ")
                    sample_opts = prod_samples['sample_id'].tolist() if not prod_samples.empty else []
                    sample_choice = st.selectbox("–î–ª—è –æ–±—Ä–∞–∑—Ü–∞ ID:", options=sample_opts)
                    param = st.text_input("–ü–∞—Ä–∞–º–µ—Ç—Ä (pH, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, aw)")
                    val = st.text_input("–ó–Ω–∞—á–µ–Ω–∏–µ")
                    if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ"):
                        if sample_choice:
                            new_id = measurements['id'].max() + 1 if not measurements.empty and measurements[
                                'id'].notna().any() else 1
                            new_row = {"id": new_id, "sample_id": sample_choice, "parameter": param,
                                       "actual_value": val}
                            append_row_csv(MEASUREMENTS_CSV, new_row,
                                           cols_order=["id", "sample_id", "parameter", "unit", "actual_value",
                                                       "method"])
                            st.success(f"–ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞ #{sample_choice} –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                            st.rerun()
                        else:
                            st.warning("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±—Ä–∞–∑–µ—Ü.")

# ==========================================================================
# –°–¢–†–ê–ù–ò–¶–ê 3: –ê–ù–ê–õ–ò–ó –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò
# ==========================================================================
elif page == "–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏":
    st.title("üß™ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")

    with st.expander("‚ÑπÔ∏è –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ –∏ –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª—É—á—à–∏–π?"):
        st.write("""
            **–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?**
            –≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ **–¥–∞–≤–ª–µ–Ω–∏–µ** –∏ **–≤—è–∑–∫–æ—Å—Ç—å** —Å—ã—Ä—å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–¥—É–∫—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–µ –≤—ã–¥–µ–ª—è—è –∂–∏—Ä –∏–ª–∏ –≤–ª–∞–≥—É.

            **–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª—É—á—à–∏–π?**
            –¶–µ–ª—å ‚Äî –ø–æ–ª—É—á–∏—Ç—å **–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π** `Stability Index`. –ß–µ–º –≤—ã—à–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, —É–ø—Ä—É–≥–∏–º –∏ –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º –±—É–¥–µ—Ç –∫–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ "–ø–∏–∫" –Ω–∞ 3D-–≥—Ä–∞—Ñ–∏–∫–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        """)

    if all_meat_data and 'T2' in all_meat_data:
        df_stability = all_meat_data['T2']
        required_cols = ['Pressure_bar', 'Viscosity_mPa_s', 'StabilityIndex']
        if not all(col in df_stability.columns for col in required_cols):
            st.error(f"–û—à–∏–±–∫–∞ –≤ –ª–∏—Å—Ç–µ 'T2': –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã {required_cols}.")
        else:
            st.subheader("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
            col1, col2 = st.columns(2)
            pressure_val = col1.slider("–î–∞–≤–ª–µ–Ω–∏–µ (Pressure, bar)", 0.0, 5.0, 2.5, 0.1)
            viscosity_val = col2.slider("–í—è–∑–∫–æ—Å—Ç—å (Viscosity, mPa¬∑s)", 0.0, 5.0, 2.5, 0.1)
            predicted_stability = calculate_stability(pressure_val, viscosity_val)
            st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π StabilityIndex", value=f"{predicted_stability:.4f}")

            st.markdown("---")
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏")
            X1 = df_stability['Pressure_bar'].values;
            X2 = df_stability['Viscosity_mPa_s'].values;
            Y = df_stability['StabilityIndex'].values
            Z_model = calculate_stability(X1, X2)

            fig1, ax1 = plt.subplots();
            ax1.plot(Y, 'o-', label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç');
            ax1.plot(Z_model, 's--', label='–ú–æ–¥–µ–ª—å');
            ax1.set_xlabel('BatchID');
            ax1.set_ylabel('Stability Index');
            ax1.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
            ax1.legend();
            ax1.grid(True)

            X1g, X2g = np.meshgrid(np.linspace(min(X1), max(X1), 30), np.linspace(min(X2), max(X2), 30))
            Zg = calculate_stability(X1g, X2g)
            fig2 = plt.figure();
            ax2 = fig2.add_subplot(111, projection='3d');
            surf = ax2.plot_surface(X1g, X2g, Zg, cmap='turbo');
            ax2.set_xlabel('Pressure');
            ax2.set_ylabel('Viscosity');
            ax2.set_zlabel('Stability');
            ax2.set_title('3D –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞');
            fig2.colorbar(surf)

            col1_viz, col2_viz = st.columns(2)
            with col1_viz:
                st.pyplot(fig1)
            with col2_viz:
                st.pyplot(fig2)
    else:
        st.error("–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–ª–∏—Å—Ç 'T2') –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# ==========================================================================
# ==========================================================================
# –°–¢–†–ê–ù–ò–¶–ê 4: –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï PH
# ==========================================================================
elif page == "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ pH":
    st.title("üå°Ô∏è –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ pH –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Å–æ–ª–∞")

    with st.expander("‚ÑπÔ∏è –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ –∏ –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª—É—á—à–∏–π?"):
        st.write("""
            **–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?**
            –ö–æ–Ω—Ç—Ä–æ–ª—å pH (–∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç–∏) ‚Äî –≤–∞–∂–Ω–µ–π—à–∏–π —ç—Ç–∞–ø –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è **–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏** –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ **–≤–∫—É—Å–∞ –∏ –∞—Ä–æ–º–∞—Ç–∞**. –≠—Ç–∞ –º–æ–¥–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è pH.

            **–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª—É—á—à–∏–π?**
            –¶–µ–ª—å ‚Äî –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ **pH –æ—Ç 4.8 –¥–æ 5.3**.
        """)

    if df_ph is not None:
        required_cols = ['CuringTime_h', 'pH']
        if not all(col in df_ph.columns for col in required_cols):
            st.error(f"–û—à–∏–±–∫–∞ –≤ 'opyty.xlsx': –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã {required_cols}.")
        else:
            time_h, ph_obs = df_ph['CuringTime_h'].values, df_ph['pH'].values

            model_func, ph_pred, rmse, r2, coeffs = get_ph_model(time_h, ph_obs)

            if model_func is None:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ pH.")
            else:
                st.markdown("---")
                st.subheader("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ pH (–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å)")
                st.markdown(f"**–ú–æ–¥–µ–ª—å: pH = {coeffs[0]:.4f} * log(t) + {coeffs[1]:.4f}**")

                col1, col2 = st.columns(2)
                col1.metric("R¬≤ (—Ç–æ—á–Ω–æ—Å—Ç—å)", f"{r2:.3f}")
                col2.metric("RMSE (–æ—à–∏–±–∫–∞)", f"{rmse:.4f}")

                time_val = st.slider("–í—Ä–µ–º—è –ø–æ—Å–æ–ª–∞ (CuringTime, —á)",
                                     min_value=1.0,
                                     max_value=72.0,
                                     value=24.0)

                predicted_ph = model_func(time_val)
                st.metric(label=f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π pH –¥–ª—è {time_val:.1f} —á", value=f"{predicted_ph:.4f}")

                st.markdown("---")
                st.subheader("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
                search_times = np.arange(1.0, 72.0, 0.1)
                predicted_phs = model_func(search_times)
                optimal_mask = (predicted_phs >= 4.8) & (predicted_phs <= 5.3)
                optimal_times = search_times[optimal_mask]

                if optimal_times.size > 0:
                    start_time = optimal_times.min()
                    end_time = optimal_times.max()
                    st.success(
                        f"–ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ü–µ–ª–µ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ pH (4.8-5.3) –ø—Ä–∏–º–µ—Ä–Ω–æ **—Å {start_time:.1f} –ø–æ {end_time:.1f} —á–∞—Å**.")
                else:
                    st.warning(
                        "–í –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–¥–æ 72—á) –º–æ–¥–µ–ª—å –Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω pH 4.8-5.3.")

                st.markdown("---")
                st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
                valid_indices = ~np.isnan(time_h) & ~np.isnan(ph_obs) & (time_h > 0)
                fig1, ax1 = plt.subplots()

                if optimal_times.size > 0:
                    ax1.axvspan(start_time, end_time, color='green', alpha=0.2, label='–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ (pH 4.8-5.3)')

                ax1.scatter(time_h[valid_indices], ph_obs[valid_indices], s=80, c='b', label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç')
                t_smooth = np.linspace(min(time_h[valid_indices]), max(time_h[valid_indices]), 200)
                ph_model_smooth = model_func(t_smooth)
                ax1.plot(t_smooth, ph_model_smooth, 'r-', linewidth=2, label='–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å')
                ax1.set_xlabel('–í—Ä–µ–º—è –ø–æ—Å–æ–ª–∞, —á');
                ax1.set_ylabel('pH');
                ax1.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å pH –æ—Ç –≤—Ä–µ–º–µ–Ω–∏');
                ax1.legend();
                ax1.grid(True)

                fig2, ax2 = plt.subplots();
                ax2.scatter(ph_obs[valid_indices], ph_pred, s=80, c='b');
                ax2.plot([min(ph_obs[valid_indices]), max(ph_obs[valid_indices])],
                         [min(ph_obs[valid_indices]), max(ph_obs[valid_indices])], 'k--');
                ax2.set_xlabel('–ù–∞–±–ª—é–¥–∞–µ–º—ã–π pH');
                ax2.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π pH');
                ax2.set_title('–ù–∞–±–ª—é–¥–∞–µ–º—ã–π vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π');
                ax2.grid(True)

                col1_viz, col2_viz = st.columns(2)
                with col1_viz:
                    st.pyplot(fig1)
                with col2_viz:
                    st.pyplot(fig2)
    else:
        st.error("–î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è pH ('opyty.xlsx') –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
# ==========================================================================
# –°–¢–†–ê–ù–ò–¶–ê 5: –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•
# ==========================================================================
elif page == "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö":
    st.title("üóÇÔ∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")

    if all_meat_data:
        available_tables = list(all_meat_data.keys())
        if df_ph is not None:
            available_tables.append('opyty.xlsx')

        choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:", available_tables)

        st.markdown(f"**–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑: `{choice}`**")

        if choice == 'opyty.xlsx':
            if df_ph is not None: st.dataframe(df_ph)
        else:
            st.dataframe(all_meat_data[choice])
    else:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
#streamlit run app.py